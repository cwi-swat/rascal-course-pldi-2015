rule binOpExp(E1, E2, plus) :
	%tmp.0 = lower E1
	%tmp.1 = lower E2
	emit %tmp.3 = addInst(%tmp.0, %tmp.1)
;;

rule break(noExpr) :
	@L1 = getLabelFromStack break 0
	emit jump(@L1)
;;

rule break(someExpr(scalar(integer(N)))) :
	@L1 = getLabelFromStack break N
	emit jump(@L1)
;;

//	| const(list[Const] consts)
// const(str name, Expr constValue);
rule const(Xs) :
	foreach const(N,E) in Xs
		%tmp.1 = lower E
		emit defConst(N,%tmp.1)
	done
;;

// 	\continue(OptionExpr continueExpr)
rule continue(noExpr) :
	@L1 = getLabelFromStack continue 0
	emit jump(@L1)
;;

// 	\continue(OptionExpr continueExpr)
rule continue(someExpr(scalar(integer(N)))) :
	@L1 = getLabelFromStack continue N
	emit jump(@L1)
;;

//	| do(Expr cond, list[Stmt] body)
rule do(C,Bs) :
	new label @L1
	
	%tmp.0 = lower cond
;;

